{% set name = "VaSP" %}
{% set version = "1.0" %}

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  url: https://github.com/KVSlab/VaSP/archive/v{{ version }}.tar.gz
  sha256: 79db5beddf4afbf3061adf4be83f6678c99a01fd7f9502944d9d30c422581541

build:
  entry_points:
    - vasp-generate-mesh = vasp.preprocessing.preprocessing:main_meshing
    - vasp-generate-solid-probe = vasp.preprocessing.generate_solid_probe:main
    - vasp-predeform-mesh = vasp.postprocessing.predeform_mesh:main
    - vasp-refine-mesh = vasp.postprocessing.postprocessing_mesh.create_refined_mesh:main
    - vasp-separate-mesh = vasp.postprocessing.postprocessing_mesh.separate_mesh:main
    - vasp-log-plotter = vasp.postprocessing.log_plotter:main
    - vasp-create-hdf5 = vasp.postprocessing.postprocessing_fenics.create_hdf5:main
    - vasp-create-separate-domain-viz = vasp.postprocessing.postprocessing_fenics.create_separate_domain_visualization:main
    - vasp-compute-stress = vasp.postprocessing.postprocessing_fenics.compute_stress_strain:main
    - vasp-compute-hemo = vasp.postprocessing.postprocessing_fenics.compute_hemodynamics:main
    - vasp-create-spectrograms-chromagrams = vasp.postprocessing.postprocessing_h5py.create_spectrograms_chromagrams:main
    - vasp-create-spectrum = vasp.postprocessing.postprocessing_h5py.create_spectrum:main
    - vasp-create-hi-pass-viz = vasp.postprocessing.postprocessing_h5py.create_hi_pass_viz:main
  noarch: python
  script: {{ PYTHON }} -m pip install . -vv --no-deps --no-build-isolation
  number: 0

requirements:
  host:
    - python {{ python_min }}
    - setuptools >=61.0.0
    - wheel
    - pip
  run:
    - python >={{ python_min }}
    - fenics >=2019.1.0
    - vmtk
    - morphman
    - paramiko
    - meshio
    - numpy
    - matplotlib-base
    - pandas
    - tqdm
    - expat ==2.5.0
    - hdf5 ==1.12.2
    - mpi4py ==3.1.4
    - turtlefsi
    - vampy

test:
  imports:
    - vasp
  source_files:
    - tests/*
    - src/*
  commands:
    # Temporarily disabled due to upstream pybind11 issue in fenics
    # See: https://github.com/conda-forge/fenics-feedstock/pull/256
    # - pip check

    # Check that all CLI entry points are available
    - vasp-generate-mesh --help
    - vasp-generate-solid-probe --help
    - vasp-predeform-mesh --help
    - vasp-refine-mesh --help
    - vasp-separate-mesh --help
    - vasp-log-plotter --help
    - vasp-create-hdf5 --help
    - vasp-create-separate-domain-viz --help
    - vasp-compute-stress --help
    - vasp-compute-hemo --help
    - vasp-create-spectrograms-chromagrams --help
    - vasp-create-spectrum --help
    - vasp-create-hi-pass-viz --help

    # Avoid OpenMPI errors when running mpi4py in isolated environments
    - export OMPI_MCA_plm=isolated

    # Only a small subset of fast and representative tests are run here
    # to reduce test time in conda-forge CI
    - pytest -k test_mesh_model_with_one_inlet_and_two_outlets
    - pytest -k test_compute_hemodynamics
    - pytest -k test_plot_all
    - pytest -k test_cylinder_problem
  requires:
    - python {{ python_min }}
    - pip
    - pytest

about:
  home: https://github.com/KVSlab/VaSP
  summary: Vascular Fluid Structure Interaction Pipline
  description: |
    The Vascular Fluid-Structure Interaction Simulation Pipeline (VaSP) is a toolkit for simulating fluid-structure interactions (FSI) in vascular systems. It streamlines the process from pre-processing to post-processing of vascular FSI simulations. Starting with medical image-based surface meshes, VaSP uses extended version of VMTK to generate volumetric FSI meshes. It then runs FSI simulations using turtleFSI. For post-processing, VaSP employs FEniCS and other Python packages to compute hemodynamic indices like wall shear stress and stress/strain. By integrating these tools, VaSP aims to simplify vascular FSI analyses.
  license: GPL-3.0-or-later
  license_family: GPL3
  license_file: LICENSE
  doc_url: https://kvslab.github.io/VaSP
  dev_url: https://github.com/KVSlab/VaSP

extra:
  recipe-maintainers:
    - johannesring
    - keiyamamo
